""" example of ofblockmeshdicthelper
try to generate cbox mesh
"""

from __future__ import unicode_literals, print_function, division

import math

from ofblockmeshdicthelper import BlockMeshDict, Vertex, SimpleGrading


def make_block_mesh(case_name):
    wedgedegree = 5.0

    # geometries
    length_x = 1.0
    length_y = 1.0
    length_z = 0.1

    bmd = BlockMeshDict()

    bmd.set_metric("m")

    basevs = [
        Vertex(0, 0, length_z, "v0"),
        Vertex(length_x, 0, length_z, "v1"),
        Vertex(length_x, length_y, length_z, "v3"),
        Vertex(0, length_y, length_z, "v2"),
    ]

    for v in basevs:
        bmd.add_vertex(v.x, v.y, 0, v.name + "-z")
        bmd.add_vertex(v.x, v.y, v.z, v.name + "+z")

    # utility to to generate vertex names
    def vnamegen(x0z0, x1y0, x1y1, x0z1):
        return (
            x0z0 + "-z",
            x1y0 + "-z",
            x0z1 + "-z",
            x1y1 + "-z",
            x0z0 + "+z",
            x1y0 + "+z",
            x1y1 + "+z",
            x0z1 + "+z",
        )

    # Noted that 'v0+y' and 'v3+y' are still valid
    b0 = bmd.add_hexblock(
        vnamegen("v0", "v1", "v2", "v3"),
        (80, 80, 1),
        "b0",
    )

    # face element of block can be generated by Block.face method
    bmd.add_boundary("wall", "frontAndBack", [b0.face("ym"), b0.face("yp")])
    bmd.add_boundary("wall", "topAndBottom", [b0.face("zp"), b0.face("zm")])
    bmd.add_boundary("wall", "hot", [b0.face("xp")])
    bmd.add_boundary("wall", "cold", [b0.face("xm")])

    # prepare for output
    bmd.assign_vertexid()

    with open(f"{case_name}/system/blockMeshDict", "w") as file:
        file.write(bmd.format())
    return bmd.format()
